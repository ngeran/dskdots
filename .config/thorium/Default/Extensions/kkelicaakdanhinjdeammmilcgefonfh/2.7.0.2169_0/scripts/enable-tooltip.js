var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/// <reference path="../../typings/html5.d.ts" />
;
(function (context) {
    const POSITIONS = {
        center: 0,
        top: -1,
        left: -1,
        bottom: 1,
        right: 1,
    };
    const CONFIG = {
        WrapperID: 'window_resizer_tooltip_wrapper',
        StylesID: 'window_resizer_tooltip_styles',
        HideTimeout: 2000,
        ZoomFactor: 1,
        Position: ['bottom', 'right'],
    };
    const SLOTS = {
        WindowWidth: null,
        WindowHeight: null,
        ViewportWidth: null,
        ViewportHeight: null,
        CloseButton: null,
        SettingsButton: null,
    };
    const STATE = {
        NeedsUpdate: false,
        PendingHide: null,
    };
    const Runtime = {
        addEventListener: function (listener) {
            !chrome.runtime.onMessage.hasListener(listener) && chrome.runtime.onMessage.addListener(listener);
        },
        removeEventListener: function (listener) {
            try {
                chrome.runtime.onMessage.removeListener(listener);
            }
            catch (ex) { }
        },
        invoke: function (action, parameters) {
            return new Promise((resolve, reject) => {
                chrome.runtime.sendMessage({ action, parameters }, resolve);
            });
        },
        getURL: function (asset) {
            return chrome.runtime.getURL(asset);
        },
        extensionId: chrome.runtime.id,
    };
    let Tooltip = document.getElementById(CONFIG.WrapperID);
    let Styles = document.getElementById(CONFIG.StylesID);
    Tooltip && Tooltip.remove();
    Styles && Styles.remove();
    Promise.all([
        Runtime.invoke('tooltip-hide-delay'),
        Runtime.invoke('tooltip-position'),
        Runtime.invoke('get-zoom'),
    ]).then(([delay, position, zoom]) => {
        CONFIG.HideTimeout = delay.data;
        CONFIG.Position = position.data && position.data.length == 2 ? position.data : CONFIG.Position;
        CONFIG.ZoomFactor = context.devicePixelRatio / zoom.data;
        if (document.readyState !== 'complete') {
            document.addEventListener('readystatechange', _init);
        }
        else {
            _init();
        }
    });
    function _init() {
        return __awaiter(this, void 0, void 0, function* () {
            if (document.readyState !== 'complete') {
                return;
            }
            document.removeEventListener('readystatechange', _init);
            Styles = document.createElement('link');
            Styles.id = CONFIG.StylesID;
            Styles.rel = 'stylesheet';
            Styles.type = 'text/css';
            Styles.href = Runtime.getURL('assets/tpl/resize-tooltip.css');
            document.querySelector('head').appendChild(Styles);
            Tooltip = document.createElement('div');
            Tooltip.id = CONFIG.WrapperID;
            Tooltip.setAttribute('data-pos-y', CONFIG.Position[0]);
            Tooltip.setAttribute('data-pos-x', CONFIG.Position[1]);
            const TemplateSrc = yield (yield fetch(Runtime.getURL('assets/tpl/resize-tooltip.html'))).text();
            let ShadowRoot = Tooltip.attachShadow({ mode: 'closed' });
            ShadowRoot.innerHTML = TemplateSrc;
            // ShadowRoot.appendChild(document.importNode(template.content, true));
            ShadowRoot.querySelector('.logo').addEventListener('mousedown', _dragStart);
            SLOTS.WindowWidth = ShadowRoot.querySelector('.primary .width');
            SLOTS.WindowHeight = ShadowRoot.querySelector('.primary .height');
            SLOTS.ViewportWidth = ShadowRoot.querySelector('.secondary .width');
            SLOTS.ViewportHeight = ShadowRoot.querySelector('.secondary .height');
            SLOTS.CloseButton = ShadowRoot.querySelector('.close');
            SLOTS.SettingsButton = ShadowRoot.querySelector('.settings');
            document.body.appendChild(Tooltip);
            enable();
            function _dragStart(evt) {
                Tooltip.classList.add('dragging');
                document.addEventListener('mousemove', _dragUpdate);
                document.addEventListener('mouseup', _dragEnd);
                document.body.style.cursor = 'move';
            }
            function _dragEnd(evt) {
                Tooltip.classList.remove('dragging');
                document.removeEventListener('mousemove', _dragUpdate);
                document.removeEventListener('mouseup', _dragEnd);
                document.body.style.cursor = 'initial';
                Runtime.invoke('save-settings', {
                    tooltipPosition: CONFIG.Position,
                });
            }
            function _dragUpdate(evt) {
                if (!evt.clientX && !evt.clientY) {
                    return;
                }
                evt.stopPropagation();
                evt.preventDefault();
                let xSegment = window.innerWidth / 3;
                let ySegment = window.innerHeight / 3;
                let xAxis = 'left';
                let yAxis = 'top';
                if (evt.clientX > xSegment * 1)
                    xAxis = 'center';
                if (evt.clientX > xSegment * 2)
                    xAxis = 'right';
                if (evt.clientY > ySegment * 1)
                    yAxis = 'center';
                if (evt.clientY > ySegment * 2)
                    yAxis = 'bottom';
                CONFIG.Position[0] != yAxis && Tooltip.setAttribute('data-pos-y', yAxis);
                CONFIG.Position[1] != xAxis && Tooltip.setAttribute('data-pos-x', xAxis);
                if (CONFIG.Position[0] != yAxis || CONFIG.Position[1] != xAxis) {
                    CONFIG.Position = [yAxis, xAxis];
                    Tooltip.style.transform = _getTransform();
                }
            }
        });
    }
    function _toggleEventListeners(state) {
        let action = state ? 'addEventListener' : 'removeEventListener';
        Runtime[action](handleExtensionRequest);
        context[action]('resize', update, false);
        Tooltip[action]('mouseover', showOn);
        Tooltip[action]('mouseout', delayedHide);
        SLOTS.CloseButton[action]('click', disable);
        SLOTS.SettingsButton[action]('click', openSettings);
    }
    function _getTransform() {
        const scale = CONFIG.ZoomFactor / context.devicePixelRatio;
        const posY = POSITIONS[CONFIG.Position[0]];
        const posX = POSITIONS[CONFIG.Position[1]];
        let left = posX * -24 + ((window.innerWidth / scale) * (posX + 1)) / 2 - ((Tooltip.offsetWidth / scale) * (posX + 1)) / 2;
        let top = posY * -24 + ((window.innerHeight / scale) * (posY + 1)) / 2 - ((Tooltip.offsetHeight / scale) * (posY + 1)) / 2;
        return `scale(${scale}) translateY(${top}px) translateX(${left}px)`;
    }
    function enable() {
        // read the opacity to kick-start the initial CSS fade-in animation
        // (it wouldn't otherwise animate when adding the `.visible` class right after
        // appending the node to the body - most likely because of some Chrome bug)
        context.getComputedStyle(Tooltip).opacity;
        _toggleEventListeners(true);
        //show();
    }
    function disable() {
        _toggleEventListeners(false);
        hide().then(() => {
            Tooltip.remove();
            Tooltip = null;
            Styles.remove();
            Styles = null;
        });
    }
    function openSettings() {
        Runtime.invoke('open-settings', '#settings/tooltip');
    }
    function show(autoHide) {
        Tooltip.classList.add('visible');
        cancelDelayedHide();
        update();
        autoHide !== false && delayedHide();
    }
    function showOn() {
        show(false);
    }
    function hide() {
        Tooltip.classList.remove('visible');
        cancelDelayedHide();
        STATE.NeedsUpdate = false;
        return new Promise(done => setTimeout(done, 300));
    }
    function delayedHide() {
        cancelDelayedHide();
        STATE.PendingHide = setTimeout(hide, CONFIG.HideTimeout);
    }
    function cancelDelayedHide() {
        clearTimeout(STATE.PendingHide);
        STATE.PendingHide = null;
    }
    function update() {
        if (!Tooltip.parentNode) {
            disable();
            return;
        }
        if (!STATE.NeedsUpdate) {
            STATE.NeedsUpdate = true;
            context.requestAnimationFrame(_update);
        }
    }
    function _update() {
        STATE.NeedsUpdate = false;
        Tooltip.style.transform = _getTransform();
        SLOTS.WindowWidth.innerHTML = context.innerWidth;
        SLOTS.WindowHeight.innerHTML = context.innerHeight;
        SLOTS.ViewportWidth.innerHTML = context.outerWidth;
        SLOTS.ViewportHeight.innerHTML = context.outerHeight;
        !isVisible() && show();
    }
    function isVisible() {
        return Tooltip && Tooltip.classList.contains('visible');
    }
    function handleExtensionRequest(msg, sender, respond) {
        if (typeof msg === 'string') {
            msg = { command: msg };
        }
        switch (msg.command) {
            case 'STATUS':
                respond(isVisible() ? 'VISIBLE' : 'HIDDEN');
                break;
            case 'SET_HIDE_DELAY':
                CONFIG.HideTimeout = msg.delay || CONFIG.HideTimeout;
                break;
            case 'DISABLE':
                disable();
                break;
            case 'SHOW':
                show();
                break;
            case 'HIDE':
                hide();
                break;
            case 'TOGGLE':
                isVisible() ? hide() : show();
                break;
        }
    }
})(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
